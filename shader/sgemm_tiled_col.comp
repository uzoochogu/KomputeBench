// Derived from https://www.ibiblio.org/e-notes/webgl/gpu/mul/sgemm.htm
// Tiling in Local memory

#version 450

#define TS 32u
layout(local_size_x = TS, local_size_y = TS, local_size_z = 1) in;
layout(std430, binding = 0) readonly buffer ssbA { float A[]; };
layout(std430, binding = 1) readonly buffer ssbB { float B[]; };
layout(std430, binding = 2) writeonly buffer ssbC { float C[]; };

layout(push_constant) uniform PushConstants {
  float M;
  float N;
  float K;
}
params;

shared float Asub[TS][TS];  // Local memory to fit a tile of
shared float Bsub[TS][TS];  // TS*TS elements of A and B
void main() {
  uint M = uint(params.M), N = uint(params.N), K = uint(params.K);

  // Thread identifiers
  uint row = gl_LocalInvocationID.x;             // Local row ID (max: TS)
  uint col = gl_LocalInvocationID.y;             // Local col ID (max: TS)
  uint globalRow = TS * gl_WorkGroupID.x + row;  // Row ID of C (0..M)
  uint globalCol = TS * gl_WorkGroupID.y + col;  // Col ID of C (0..N)

  // Initialise the accumulation register
  float acc = 0.0;

  // Loop over all tiles
  uint numTiles = K / TS;
  for (uint t = 0u; t < numTiles; t++) {
    // Load one tile of A and B into local memory
    uint tiledRow = TS * t + row;
    uint tiledCol = TS * t + col;
    Asub[col][row] = A[tiledCol * M + globalRow];
    Bsub[col][row] = B[globalCol * K + tiledRow];

    // Synchronise to make sure the tile is loaded
    memoryBarrierShared();
    barrier();

    // Perform the computation for a single tile
    for (uint k = 0u; k < TS; k++) {
      acc += Asub[k][row] * Bsub[col][k];
    }

    // Synchronise before loading the next tile
    barrier();
  }
  // Store the final result in C
  C[globalCol * M + globalRow] = acc;
}
