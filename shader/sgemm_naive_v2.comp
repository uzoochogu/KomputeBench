// Derived from https://github.com/tpoisonooo/how-to-optimize-gemm/
// Naive MatMul kernel

#version 450

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(set = 0, binding = 0) readonly buffer buf_in_tensor_1 {
  float in_tensor_1[];
};
layout(set = 0, binding = 1) readonly buffer buf_in_tensor_2 {
  float in_tensor_2[];
};
layout(set = 0, binding = 2) writeonly buffer buf_out_tensor {
  float out_tensor[];
};

layout(constant_id = 0) const float tensor_size_f = 0;

void main() {
  uint block = 32;

  uint globalRow = gl_WorkGroupID.x * block + gl_LocalInvocationID.x;
  uint globalCol = gl_WorkGroupID.y * block + gl_LocalInvocationID.y;
  uint tensor_size = uint(tensor_size_f);

  float acc = 0.0;
  for (uint k = 0u; k < tensor_size; k++) {
    acc += in_tensor_1[(globalCol * tensor_size) + k] *
           in_tensor_2[(k * tensor_size) + globalRow];
  }
  out_tensor[(globalCol * tensor_size) + globalRow] = acc;
}
